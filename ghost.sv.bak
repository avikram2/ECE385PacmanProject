module ghost_red (input Reset, frame_clk, hasMoved, input logic [9:0] pacmanX, input logic [9:0] pacmanY, output [9:0] ghost_redX, output [9:0] ghost_redY );


    logic [9:0] ghostX, ghostY, DistX, DistY, ghostXmotion, ghostYmotion;


    assign DistX = pacmanX - ghostX;
    assign DistY = pacmanY - ghostY;

    logic [1:0] direction;

    int size = 8;

    always_comb
    begin
        direction = 0;
        if (DistX*DistX >= DistY*DistY)
        direction = (DistY >= 0)? 1: 3;

        else if (DistY*DistY > DistX*DistX)
        direction = (DistX >= 0)? 0: 2;
    end


    always_ff @ (posedge Reset or posedge frame_clk)
    begin
        if (Reset)
        begin
            ghostX <= 100;
            ghostY <= 100;
            ghostXmotion <= 0;
            ghostYmotion <= 0;
        end

        else if (hasMoved == 0)
        begin
            ghostXmotion <= 0;
            ghostYmotion <= 0;
        end

        else
        begin 
            if ( (ghostY + size) >=  479)  // Ball is at the bottom edge, BOUNCE!
					  begin
					  ghostYmotion <= -1;  // 2's complement.
					  ghostXmotion <= 0;
					  
					  end
				 else if ( (ghostY) <= 0)  // Ball is at the top edge, BOUNCE!
					  begin
					  ghostYmotion <= 1;
					  ghostXmotion <= 0;
					  
					  end
				  else if ( (ghostX + size) >= 639 )  // Ball is at the Right edge, BOUNCE!
					  begin
					  ghostXmotion <= -1;  // 2's complement.
					  ghostYmotion <= 0; 
					  end
				 else if ( ghostX <= 0 )  // Ball is at the Left edge, BOUNCE!
					  begin
					  ghostXmotion <= 1;
					  ghostYmotion <= 0; 
                      end
                else 
                begin
            ghostXmotion <= 0; 
            ghostYmotion <= 1;
            case (direction)
                0: begin
                    ghostXmotion <= 1;
                    ghostYmotion <= 0;
                end

                1: begin
                    ghostXmotion <= 0;
                    ghostYmotion <= 1;
                end
                2: begin
                    ghostXmotion <= -1;
                    ghostYmotion <= 0;
                end
                3: begin
                    ghostXmotion <= 0;
                    ghostYmotion <= -1;
                end

            endcase
        end

        ghostX <= ghostX + ghostXmotion;
        ghostY <= ghostY + ghostYmotion;
        end
    end



    assign ghost_redX = ghostX;
    assign ghost_redY = ghostY;



endmodule